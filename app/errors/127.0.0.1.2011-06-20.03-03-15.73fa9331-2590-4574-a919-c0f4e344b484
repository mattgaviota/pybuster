(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/marco/proyectos/web2py-trunk/applications/mvstore/models/db.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n                                              # optional DAL(\'gae://namespace\')\n    session.connect(request, response, db = db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import *\nmail = Mail()                                  # mailer\nauth = Auth(globals(),db)                      # authentication/authorization\ncrud = Crud(globals(),db)                      # for CRUD helpers using auth\nservice = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\nplugins = PluginManager()\n\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'  # your SMTP server\nmail.settings.sender = \'you@gmail.com\'         # your email\nmail.settings.login = \'username:password\'      # your credentials or None\n\nauth.settings.hmac_key = \'sha512:7fbe918c-a556-4879-a996-7618f8e7c6aa\'   # before define_tables()\nauth.define_tables()                           # creates all needed tables\nauth.settings.mailer = mail                    # for user email verification\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(\'default\',\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\nauth.settings.reset_password_requires_verification = True\nauth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(\'default\',\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n#########################################################################\n## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, uncomment and customize following\n# from gluon.contrib.login_methods.rpx_account import RPXAccount\n# auth.settings.actions_disabled=[\'register\',\'change_password\',\'request_reset_password\']\n# auth.settings.login_form = RPXAccount(request, api_key=\'...\',domain=\'...\',\n#    url = "http://localhost:8000/%s/default/user/login" % request.application)\n## other login methods are in gluon/contrib/login_methods\n#########################################################################\n\ncrud.settings.auth = None                      # =auth to enforce authorization on crud\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\ndef Hidden(*a,**b):\n    b[\'writable\']=b[\'readable\']=False\n    return Field(*a,**b)\n\nfields=[\n        Field(\'documento\',\'integer\', required=True, unique=True),\n        Field(\'nombre\',\'string\', required=True),\n        Field(\'apellido\',\'string\',required=True),\n        Field(\'foto\',\'upload\'),\n        Field(\'domicilio\',\'string\', required=True),\n        Field(\'telefono\',\'integer\',required=True),\n        Field(\'fecha_load\',\'date\', default=request.now, writable=False)\n        ]\n\ndb.define_table(\'empleados\',\n        format=\'%(nombre)s %(apellido)s\',\n        *fields\n        )\n\ndb.define_table(\'clientes\',\n        format=\'%(nombre)s %(apellido)s\',\n        *fields\n        )\n\ndb.define_table(\'peliculas\',\n        Field(\'id_pelicula\', \'integer\', required=True,),\n        Field(\'titulo\',\'string\'),\n        Field(\'genero\',db.generos),\n        Field(\'anio\',\'integer\'),\n        Field(\'sinopsis\',\'text\'),\n        Field(\'tapa\',\'upload\'),\n        Field(\'unidades\',\'integer\'),\n        Field(\'fecha_ing\',\'date\'),\n        format=\'%(titulo)s\',\n        )\n\ndb.define_table(\'prestamos\',\n        Field(\'id_prestamo\', \'integer\', required=True),\n        Field(\'titulo\', db.peliculas),\n        Field(\'cliente\', db.clientes),\n        Field(\'empleado\', db.empleados),\n        Field(\'fecha\', \'datetime\',default=request.now, writable=False),\n        Field(\'devol\', \'datetime\'),\n        Field(\'costo\', \'integer\',default=10),\n        Field(\'mora\', \'integer\', default=0, comment="El recargo que se aplica es de $2 por dia")\n        )\n\ndb.define_table(\'generos\',\n        Field(\'genero\',\'string\'))\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "/home/marco/proyectos/web2py-trunk/gluon/restricted.py", line 192, in restricted\n    exec ccode in environment\n  File "/home/marco/proyectos/web2py-trunk/applications/mvstore/models/db.py", line 106, in <module>\n    Field(\'genero\',db.generos),\n  File "/home/marco/proyectos/web2py-trunk/gluon/dal.py", line 4255, in __getattr__\n    return self[key]\n  File "/home/marco/proyectos/web2py-trunk/gluon/dal.py", line 4249, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'generos\'\n'
p10
s.