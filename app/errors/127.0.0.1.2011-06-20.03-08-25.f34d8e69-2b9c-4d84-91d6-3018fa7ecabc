(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/marco/proyectos/web2py-trunk/applications/mvstore/controllers/default.py'
p4
sS'code'
p5
S'#-*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    return dict(message=T(\'Hello World\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\ndef empleados():\n    form=crud.create(db.empleados)\n    if form.accepts(request.vars, session):\n        response.flash = \'Agregado exitosamente\'\n    elif form.errors:\n        response.flash = \'El formulario tiene errores\'\n    else:\n        response.flash = \'Por favor, complete el formulario\'\n        \n    return dict(form=form)\n\ndef clientes():\n    form=crud.create(db.clientes)\n    if form.accepts(request.vars, session):\n        response.flash = \'Agregado exitosamente\'\n    elif form.errors:\n        response.flash = \'El formulario tiene errores\'\n    else:\n        response.flash = \'Por favor, complete el formulario\'\n    return dict(form=form)\n\ndef peliculas():\n    form=crud.create(db.peliculas)\n    if form.accepts(request.vars, session):\n        response.flash = \'Agregado exitosamente\'\n    elif form.errors:\n        response.flash = \'El formulario tiene errores\'\n    else:\n        response.flash = \'Por favor, complete el formulario\'    \n    return dict(form=form)\n    \n\ndef prestamos():\n    form=crud.create(db.prestamos)\n    if form.accepts(request.vars, session):\n        response.flash = \'Agregado exitosamente\'\n    elif form.errors:\n        response.flash = \'El formulario tiene errores\'\n    else:\n        response.flash = \'Por favor, complete el formulario\'\n    return dict(form=form)\n    \ndef personal():\n    return dict(records=db().select(db.empleados.ALL))\n\ndef clientesall():\n    return dict(records=db().select(db.clientes.ALL))\n    \ndef peliculasall():\n    return dict(records=db().select(db.peliculas.ALL))\n    \ndef prestados():\n    return dict(records=db().select(db.prestamos.ALL))\n\ndef busqueda():\n    "an ajax wiki search page"\n    return dict(form=FORM(INPUT(_id=\'keyword\',_name=\'keyword\',\n            _onkeyup="ajax(\'bg_find\', [\'keyword\'], \'target\');")),\n            target_div=DIV(_id=\'target\'), _type=\'submit\')\n\ndef bg_find():\n    pattern = \'%\' + request.vars.keyword.lower() + \'%\'\n    pages = db(db.peliculas.titulo.lower().like(pattern)).select(orderby=db.peliculas.title)\n    items = [A(row.titulo, _href=URL(\'show\', args=row.id)) for row in pages]\n    return UL(*items).xml()\n\n\nresponse._vars=response._caller(peliculasall)\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "/home/marco/proyectos/web2py-trunk/gluon/restricted.py", line 192, in restricted\n    exec ccode in environment\n  File "/home/marco/proyectos/web2py-trunk/applications/mvstore/controllers/default.py", line 121, in <module>\n  File "/home/marco/proyectos/web2py-trunk/gluon/globals.py", line 137, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/marco/proyectos/web2py-trunk/applications/mvstore/controllers/default.py", line 103, in peliculasall\n    return dict(records=db().select(db.peliculas.ALL))\n  File "/home/marco/proyectos/web2py-trunk/gluon/dal.py", line 5394, in select\n    return self.db._adapter.select(self.query,fields,attributes)\n  File "/home/marco/proyectos/web2py-trunk/gluon/dal.py", line 1181, in select\n    return self.parse(rows,self._colnames)\n  File "/home/marco/proyectos/web2py-trunk/gluon/dal.py", line 1377, in parse\n    colset[fieldname] = rid = Reference(value)\nValueError: invalid literal for int() with base 10: \'ljn;kj;k\'\n'
p10
s.